def find_max_min(arr, left, right):
    if left == right:
        # If there is only one element in the subarray, return it as both max and min
        return arr[left], arr[left]
    elif right - left == 1:
        # If there are two elements in the subarray, compare them and return max and min
        if arr[left] < arr[right]:
            return arr[right], arr[left]
        else:
            return arr[left], arr[right]
    else:
        # Divide the array into two halves and find max and min in each half
        mid = (left + right) // 2
        max_left, min_left = find_max_min(arr, left, mid)
        max_right, min_right = find_max_min(arr, mid + 1, right)

        # Combine the results to get the overall max and min
        overall_max = max(max_left, max_right)
        overall_min = min(min_left, min_right)

        return overall_max, overall_min

# Function to call the divide and conquer algorithm
def find_max_and_min(arr):
    if not arr:
        return None, None
    return find_max_min(arr, 0, len(arr) - 1)

# Example usage:
my_list = [3, 7, 1, 9, 4, 6, 8, 2, 5]
max_val, min_val = find_max_and_min(my_list)
print("Maximum value:", max_val)  # Output: Maximum value: 9
print("Minimum value:", min_val)  # Output: Minimum value: 1
