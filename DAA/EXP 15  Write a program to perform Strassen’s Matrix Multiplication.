#include <stdio.h>

void add_matrices(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subtract_matrices(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void strassen_matrix_multiply(int n, int A[][n], int B[][n], int C[][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int half = n / 2;
    int A11[half][half], A12[half][half], A21[half][half], A22[half][half];
    int B11[half][half], B12[half][half], B21[half][half], B22[half][half];
    int C11[half][half], C12[half][half], C21[half][half], C22[half][half];
    int P1[half][half], P2[half][half], P3[half][half], P4[half][half], P5[half][half], P6[half][half], P7[half][half];
    int temp1[half][half], temp2[half][half];

    // Divide matrices into submatrices
    for (int i = 0; i < half; i++) {
        for (int j = 0; j < half; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + half];
            A21[i][j] = A[i + half][j];
            A22[i][j] = A[i + half][j + half];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + half];
            B21[i][j] = B[i + half][j];
            B22[i][j] = B[i + half][j + half];
        }
    }

    // Calculate the seven products required for Strassen's algorithm
    add_matrices(half, A11, A22, temp1);
    add_matrices(half, B11, B22, temp2);
    strassen_matrix_multiply(half, temp1, temp2, P1);

    add_matrices(half, A21, A22, temp1);
    strassen_matrix_multiply(half, temp1, B11, P2);

    subtract_matrices(half, B12, B22, temp1);
    strassen_matrix_multiply(half, A11, temp1, P3);

    subtract_matrices(half, B21, B11, temp1);
    strassen_matrix_multiply(half, A22, temp1, P4);

    add_matrices(half, A11, A12, temp1);
    strassen_matrix_multiply(half, temp1, B22, P5);

    subtract_matrices(half, A21, A11, temp1);
    add_matrices(half, B11, B12, temp2);
    strassen_matrix_multiply(half, temp1, temp2, P6);

    subtract_matrices(half, A12, A22, temp1);
    add_matrices(half, B21, B22, temp2);
    strassen_matrix_multiply(half, temp1, temp2, P7);

    // Calculate the four quadrants of the resulting matrix
    add_matrices(half, P1, P4, temp1);
    subtract_matrices(half, temp1, P5, temp2);
    add_matrices(half, temp2, P7, C11);

    add_matrices(half, P3, P5, C12);

    add_matrices(half, P2, P4, C21);

    subtract_matrices(half, P1, P2, temp1);
    add_matrices(half, temp1, P3, temp2);
    add_matrices(half, temp2, P6, C22);

    // Combine the quadrants to form the resulting matrix
    for (int i = 0; i < half; i++) {
        for (int j = 0; j < half; j++) {
            C[i][j] = C11[i][j];
            C[i][j + half] = C12[i][j];
            C[i + half][j] = C21[i][j];
            C[i + half][j + half] = C22[i][j];
        }
    }
}

void print_matrix(int n, int matrix[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    // Example 2x2 matrices, you can modify these matrices to test with different inputs.
    int n = 2;
    int matrix1[][2] = { {1, 2}, {3, 4} };
    int matrix2[][2] = { {5, 6}, {7, 8} };
    int result[n][n];

    strassen_matrix_multiply(n, matrix1, matrix2, result);

    printf("Resultant matrix:\n");
    print_matrix(n, result);

    return 0;
}
